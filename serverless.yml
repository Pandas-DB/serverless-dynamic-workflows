service: serverless-dynamic-workflows

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  logRetentionInDays: 14
  tracing:
    lambda: true
    apiGateway: true

  environment:
    METADATA_TABLE: ${self:service}-${self:provider.stage}
    LOCK_TABLE: ${self:service}-events-lock-${self:provider.stage}
    CHUNK_SIZE: 100000
    POWERTOOLS_SERVICE_NAME: ${self:service}
    LOG_LEVEL: INFO
    DEPLOYMENT_REGION: ${self:provider.region}

  httpApi:
    cors: true
    authorizers:
      cognitoAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: !Join
          - ''
          - - 'https://cognito-idp.'
            - ${self:provider.region}
            - '.amazonaws.com/'
            - !Ref CognitoUserPool
        audience:
          - !Ref CognitoUserPoolClient

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.METADATA_TABLE}"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
            - s3:DeleteObject
            - s3:ListObjects
            - s3:ListObjectsV2
            - s3:HeadBucket
          Resource:
            - "arn:aws:s3:::events-*"
            - "arn:aws:s3:::events-*/*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
          Resource: "arn:aws:cognito-idp:${self:provider.region}:*:userpool/*"
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOCK_TABLE}"
        - Effect: Allow
          Action:
            - states:StartExecution
            - states:DescribeExecution
            - states:StopExecution
            - states:ListStateMachines
            - states:DescribeStateMachine
            - states:ListTagsForResource
          Resource: "arn:aws:states:${self:provider.region}:*:stateMachine:*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "*"
        - Effect: Allow
          Action:
            - states:ListStateMachines
            - states:DescribeStateMachine
            - states:ListTagsForResource
          Resource: "arn:aws:states:${self:provider.region}:*:stateMachine:*"
        - Effect: Allow
          Action:
            - states:DescribeExecution
          Resource: "arn:aws:states:${self:provider.region}:*:execution:*"
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
            - arn:aws:ssm:${self:provider.region}:*:parameter/${self:service}/${self:provider.stage}/*

custom:
  flowsDir: flows
  flows: ${file(./deploy/load_flows.js)}

package:
  individually: true
  patterns:
    - "!node_modules/**"
    - "!.git/**"
    - "!.venv/**"
    - "!__pycache__/**"
    - "!.pytest_cache/**"
    - "!test/**"
    - "!tests/**"
    - "!*.pyc"
    - "!.DS_Store"
    - "!**.sample"
    - "!layer/**"

functions:
  getAuthConfig:
    handler: functions/base/auth/handler.get_config
    timeout: 30
    memorySize: 128
    package:
      patterns:
        - "functions/base/auth/**"
    layers:
      - {Ref: DependenciesLambdaLayer}
    environment:
      COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
      POWERTOOLS_METRICS_NAMESPACE: ${self:service}-auth
    events:
      - httpApi:
          path: /auth/config
          method: GET

  verifyToken:
    handler: functions/base/auth/handler.verify_token
    timeout: 30
    memorySize: 128
    package:
      patterns:
        - "functions/base/auth/**"
    layers:
      - {Ref: DependenciesLambdaLayer}
    environment:
      POWERTOOLS_METRICS_NAMESPACE: ${self:service}-auth
    events:
      - httpApi:
          path: /auth/verify
          method: GET
          authorizer:
            name: cognitoAuthorizer

  runFlow:
    handler: functions/base/run_flow/handler.handler
    timeout: 30
    memorySize: 256
    package:
      patterns:
        - "functions/base/run_flow/**"
    layers:
      - {Ref: DependenciesLambdaLayer}
    environment:
      POWERTOOLS_METRICS_NAMESPACE: ${self:service}-events-producer
    events:
      - httpApi:
          path: /run/{flow_name}
          method: POST
          authorizer:
            name: cognitoAuthorizer

  listFlows:
      handler: functions/base/list_flows/handler.handler
      timeout: 30
      memorySize: 256
      package:
        patterns:
          - "functions/base/list_flows/**"
      layers:
        - {Ref: DependenciesLambdaLayer}
      environment:
        POWERTOOLS_METRICS_NAMESPACE: ${self:service}-flows
      events:
        - httpApi:
            path: /flows
            method: GET
            authorizer:
              name: cognitoAuthorizer

  getFlowResult:
    handler: functions/base/get_flow_result/handler.handler
    timeout: 30
    memorySize: 256
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - httpApi:
          path: /run/{flow_name}/{execution_id}
          method: GET
          authorizer:
            name: cognitoAuthorizer

plugins:
  - ./deploy/serverless-dynamic-functions.js

layers:
  dependencies:
    path: layer
    description: Required dependencies for data frame processing
    compatibleRuntimes:
      - python3.9

resources:
  - ${file(./deploy/generate-step-functions.js)}
  - Resources:
      MetadataTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:provider.environment.METADATA_TABLE}
          AttributeDefinitions:
            - AttributeName: user_id
              AttributeType: S
            - AttributeName: df_path
              AttributeType: S
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: df_path
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST

      CognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
          UserPoolName: ${self:service}-user-pool-${self:provider.stage}

      CognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
          UserPoolId: !Ref CognitoUserPool
          ClientName: ${self:service}-client-${self:provider.stage}
          GenerateSecret: false
          ExplicitAuthFlows:
            - ALLOW_USER_PASSWORD_AUTH
            - ALLOW_REFRESH_TOKEN_AUTH
            - ALLOW_USER_SRP_AUTH
          PreventUserExistenceErrors: ENABLED

    Outputs:
          UserPoolId:
            Value: !Ref CognitoUserPool
          UserPoolClientId:
            Value: !Ref CognitoUserPoolClient
          ApiUrl:
            Value:
              Fn::Sub:
                - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
                - ApiId: !Ref HttpApi
                  Stage: ${self:provider.stage}